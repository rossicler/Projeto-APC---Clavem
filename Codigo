#include <graphics.h>//WinBGIM - Novidade
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <windows.h>//PlaySound - Novidade
#define RESX 500
#define RESY 500
#define MAX 15

void clearscreen(void);//limpa a tela
void tabela(void);//adiciona a tabela de inserção de dados
void comentario(char *coment);//le o teclado e armazena a string comentario
void login(char *login);//le o teclado e armazena a string login
void senha(char *senha);//le o teclado e armazena a string senha
void senhaMestre(char *senha);//le o teclado e armazena a string senha mestre
void sucesso(void);//cria uma janela que informa o sucesso da operação
void tecladoD(char *senha, char *nome);//le e armazena a senha mestre para fazer a validação
int descriptografar(char *senha, char comentarioA[MAX][20], char loginA[MAX][20], char senhaA[MAX][30], char *nome, int contador);
int criptografar(char *senha, char comentarioA[MAX][20], char loginA[MAX][20], char senhaA[MAX][30], int imagem);

int main() 
{
	//Se quiser, utilizar threads
	//música ambiente. Segura nenem!!!
	//PlaySound("musica.wav", NULL, SND_FILENAME);
	
	int x=0,y=0,contador=0,k,confere;
	char escolha;
	char comentarioA[MAX][20] = {};
	puts(comentarioA[0]);
	char loginA[MAX][20];
	char senhaA[MAX][30];
	char comentarioAF[MAX][20];
	char loginAF[MAX][20];
	char senhaAF[MAX][30];
	char senhaM[30];
	memset(senhaM,'\0',30);
	char senhaMF[30];
	memset(senhaMF,'\0',30);
	char nomeIMG[30];
	memset(nomeIMG,'\0',30);
	int imageE;
	//criação da janela gráfica----------------------------------
	initwindow(RESX, RESY, "Projeto Crypt");
	clearscreen();
    //-----------------------------------------------------------
  	//adicionando imagens
	readimagefile("TITULO PRINCIPAL.jpg",20,20,480,120);
	readimagefile("crypt.jpg",20,245,245,270);
	readimagefile("descrypt.jpg",255,245,480,270);
	
    //--------------------------------------------------------------------------------------
    while (!ismouseclick(WM_LBUTTONDOWN))
    {
        delay(10); // Five second delay, so there might be a several clicks
    }
    
    //Pegando clique do mouse-------------------------------------//
    while (ismouseclick(WM_LBUTTONDOWN))
	{
		
		getmouseclick(WM_LBUTTONDOWN, x, y);//pegando o clique do mouse. As coordenadas x e y são armazenadas.		
		
		if((x>=20&&x<=245) && (y>=245)&&(y<=270))//o clique foi no botão
		{
			//dando a impressão gráfica do clique---------
			readimagefile("botao2.jpg",20,245,245,270);
			delay(400);
			readimagefile("crypt.jpg",20,245,245,270);
			//------------------------------------------------------------------------
			clearscreen();
			readimagefile("TituloIm.jpg",20,20,480,120);
  		    readimagefile("Imagem 1.jpeg",20,200,130,320);//imagens para a escolha do usuário
  		    readimagefile("Imagem 2.jpeg",135,200,245,320);
  		    readimagefile("Imagem 3.jpeg",255,200,360,320);
  		    readimagefile("Imagem 4.jpeg",365,200,475,320);
  		    //--------------------------------------------------------------------------------------------
			while (!ismouseclick(WM_LBUTTONDOWN))
  			{
				delay(10);
   			}
    		while (ismouseclick(WM_LBUTTONDOWN))
			{
			 	getmouseclick(WM_LBUTTONDOWN, x, y);
  		   		if((x>=20&&x<=130) && (y>=200&&y<=320))
  		   		{
					imageE = 1;
					contador = 0;//inicializando a variavel contador
					do
					{
						tabela();
						comentario(comentarioA[contador]);//armazenando as strings nas variaveis char de comentario,login e senha a partir da função criada.
						login(loginA[contador]);
						senha(senhaA[contador]);
						escolha = getch();
						contador++;//variavel que armazena a quantidade de dados fornecido pelo usuario
					}while(escolha!=27);//lógica para inserção de dados até que se aperte o ESC
					
					senhaMestre(senhaM);//função para inserção da senha mestre	
					criptografar(senhaM, comentarioA, loginA, senhaA, imageE);//faz a criptografia e a copia da imagem
					sucesso();//função que chama a janela final
				}
				if((x>=135&&x<=245) && (y>=200&&y<=320))
				{
					imageE = 2;
					contador = 0;
					do
					{
						tabela();
						comentario(comentarioA[contador]);
						login(loginA[contador]);
						senha(senhaA[contador]);
						escolha = getch();
						contador++;
					}while(escolha!=27);
					
					senhaMestre(senhaM);
					criptografar(senhaM, comentarioA, loginA, senhaA, imageE);
					sucesso();
				}
				if((x>=255&&x<=360) && (y>=200&&y<=320))
				{
					imageE = 3;
					contador = 0;
					do
					{
						tabela();
						comentario(comentarioA[contador]);
						login(loginA[contador]);
						senha(senhaA[contador]);
						escolha = getch();
						contador++;
					}while(escolha!=27);
					
					senhaMestre(senhaM);
					criptografar(senhaM, comentarioA, loginA, senhaA, imageE);
					sucesso();
				}
				if((x>=365&&x<=475) && (y>=200&&y<=320))
				{
					imageE = 4;
					contador = 0;
					do
					{
						tabela();
						comentario(comentarioA[contador]);
						login(loginA[contador]);
						senha(senhaA[contador]);
						escolha = getch();
						contador++;
					}while(escolha!=27);
					
					senhaMestre(senhaM);
					criptografar(senhaM, comentarioA, loginA, senhaA, imageE);
					sucesso();
				}
			}		
		}
		if((x>=255&&x<=480) && (y>=245)&&(y<=270))//o clique foi no botão
		{
			//dando a impressão gráfica do clique---------
			readimagefile("botao1.jpg",255,245,480,270);
			delay(400);
			readimagefile("descrypt.jpg",255,245,480,270);
			//------------------------------------------------------------------------
			clearscreen();
  		    readimagefile("descrypt2.jpg",20,20,480,120);//imagem texto informativo
  		    
  		    tecladoD(senhaMF,nomeIMG);
  		    descriptografar(senhaMF, comentarioAF, loginAF, senhaAF, nomeIMG, contador);
  		    confere = descriptografar(senhaMF, comentarioAF, loginAF, senhaAF, nomeIMG, contador);
  		    if(confere == 0)
  		    {
				clearscreen();
				settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 2);
				setbkcolor(15);
				setcolor(0);
				bgiout<<"Senha mestre errada!!";
				outstreamxy(100,243);
			}
			if(confere == 1)
			{
				clearscreen();
				settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 1);
				setbkcolor(15);
				setcolor(0);
				bgiout<<"Senha encontrada.";
				outstreamxy(100,243);
			}
  		    
		}
		
	}
    system("PAUSE");
	return 0;
}

void clearscreen(void)
{
	setcolor (0); // cor da linha: 0 igual a preto
	setfillstyle (1, 15);//(forma de preenchimento, cor do preenchimento)  
 	bar(0, 0, RESX, RESY); // fundo branco
  	rectangle(5,5,RESX-5,RESY-5);//cria borba na tela
}

void tabela(void)
{
	setcolor (0);	
	setfillstyle (1, 15);
	bar(0, 0, RESX, RESY);
	rectangle(5,5,RESX-5,RESY-5);
	//------------------------------------------------------
	settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 1);
	setbkcolor(15);
	setcolor(0);
	//-------------------------------------------------------
	for(int k=0;k<3;k++)
   	{
   		rectangle(150,195+(k*50),350,220+(k*50));
   	}
   	bgiout <<"Comentario";
   	outstreamxy(210,180);
   	bgiout <<"Login";
   	outstreamxy(230,230);
   	bgiout <<"Senha";
   	outstreamxy(227,280);
   	
   	bgiout<<"Digite ESC para ir a proxima etapa.";
   	outstreamxy(30,420);
   	bgiout<<"OBS: Digite apos a confirmacao de todos os dados.";
   	outstreamxy(30,450);
	
	
}

void comentario(char *coment)
{
	int i=0;
	
	do
	{
		settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 1);
		setbkcolor(15);
		setcolor(0);
		coment[i] = getch();//aqui a letra digitada é lida uma a uma sem necessidade de apertar o enter
		//aqui funciona toda a lógica do backspace. Com isso podemos apagar o que foi digitado
		
		if(coment[i] == 13 || i == 14) //interromper a função, caso digite enter ou numero de letras seja igual a 14
		{
			if(coment[i] == 13)//muda o valor de enter para \0, pois nao queremos armazenar o valor do enter
				coment[i] = '\0';
			break;
		}
		if (coment[i] == 8)
		{
			setcolor (0); // cor da linha: 0 igual a preto
			setfillstyle (1, 15);//(forma de preenchimento, cor do preenchimento)  
 			
			if(i==1)
			{
				bar(151, 200, 170, 219); //preenche o local onde a letra foi escrita de branco
				i--;//subtraindo 1 de 'i', pois é necessario para que salve as letras corretamente
			}
			else
			{
				bar(150+((i-1)*15), 200, 170+((i-1)*15), 219); //preenche o local onde a letra foi escrita de branco
				i--;//subtraindo 1 de 'i', pois é necessario para que salve as letras corretamente
			}
		}
		else
		{
			bgiout <<coment[i];//função de saída na tela gráfica. Precisará ainda da "outstreamxy"
			if(i==1)//para a primeira caixinha
			{
				outstreamxy(i*170,196);//impriminto letras delocadas a cada passo. Para a primeira caixinha é diferente.
			}
			else//para todas as outras caixinhas
			{
				outstreamxy(170+((i-1)*15),196);//cálculo maluco para acertaras letras na caixinha
			}
			i++; //variável utilizada apenas para deslocar o texto
		}	
	}while(coment[i]!=13 && i<15);//digitar "ENTER" para sair...
}

void login(char *login)
{
	int i=0;
	do
	{
		settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 1);
		setbkcolor(15);
		setcolor(0);
		login[i] = getch();//aqui a letra digitada é lida uma a uma sem necessidade de apertar o enter
		//aqui funciona toda a lógica do backspace. Com isso podemos apagar o que foi digitado
		if(login[i] == 13 || i == 14) //interromper a função, caso digite enter ou numero de letras seja igual a 14
		{
			if(login[i] == 13)//muda o valor de enter para \0, pois nao queremos armazenar o valor do enter
				login[i] = '\0';
			break;
		}
		if (login[i] == 8)
		{
			setcolor (0); // cor da linha: 0 igual a preto
			setfillstyle (1, 15);//(forma de preenchimento, cor do preenchimento)  
 			
			if(i==1)
			{
				bar(151, 250, 170, 269); //preenche o local onde a letra foi escrita de branco
				i--;//subtraindo 1 de 'i', pois é necessario para que salve as letras corretamente
			}
			else
			{
				bar(150+((i-1)*15), 250, 170+((i-1)*15), 269); //preenche o local onde a letra foi escrita de branco
				i--;//subtraindo 1 de 'i', pois é necessario para que salve as letras corretamente
			}
	
		}
		else
		{
			bgiout <<login[i];//função de saída na tela gráfica. Precisará ainda da "outstreamxy"
			if(i==1)//para a primeira caixinha
			{
				outstreamxy(i*170,246);//impriminto letras delocadas a cada passo. Para a primeira caixinha é diferente.
			}
			else//para todas as outras caixinhas
			{
				outstreamxy(170+((i-1)*15),246);//cálculo maluco para acertaras letras na caixinha
			}
			i++; //variável utilizada apenas para deslocar o texto
		}	
	}while(login[i]!=13 && i<15);//digitar "ENTER" para sair...
}

void senha(char *senha)
{
	int i=0;
	do
	{
		settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 1);
		setbkcolor(15);
		setcolor(0);
		senha[i] = getch();//aqui a letra digitada é lida uma a uma sem necessidade de apertar o enter
		//aqui funciona toda a lógica do backspace. Com isso podemos apagar o que foi digitado
		if(senha[i] == 13 || i == 14) //interromper a função, caso digite enter ou numero de letras seja igual a 14
		{
			if(senha[i] == 13)//muda o valor de enter para \0, pois nao queremos armazenar o valor do enter
				senha[i] = '\0';
			break;
		}
		if (senha[i] == 8)
		{
			setcolor (0); // cor da linha: 0 igual a preto
			setfillstyle (1, 15);//(forma de preenchimento, cor do preenchimento)  
 			
			if(i==1)
			{
				bar(151, 300, 170, 319); //preenche o local onde a letra foi escrita de branco
				i--;//subtraindo 1 de 'i', pois é necessario para que salve as letras corretamente
			}
			else
			{
				bar(150+((i-1)*15), 300, 170+((i-1)*15), 319); //preenche o local onde a letra foi escrita de branco
				i--;//subtraindo 1 de 'i', pois é necessario para que salve as letras corretamente
			}
	
		}
		else
		{
			bgiout <<senha[i];//função de saída na tela gráfica. Precisará ainda da "outstreamxy"
			if(i==1)//para a primeira caixinha
			{
				outstreamxy(i*170,296);//impriminto letras delocadas a cada passo. Para a primeira caixinha é diferente.
			}
			else//para todas as outras caixinhas
			{
				outstreamxy(170+((i-1)*15),296);//cálculo maluco para acertaras letras na caixinha
			}
			i++; //variável utilizada apenas para deslocar o texto
		}	
	}while(senha[i]!=13 && i<15);//digitar "ENTER" para sair...
}

void senhaMestre(char *senha)
{	
	int i=0;
	
	setcolor (0);	
	setfillstyle (1, 15);
	bar(0, 0, RESX, RESY);
	rectangle(5,5,RESX-5,RESY-5);
	
	rectangle(150,275,350,300);
	bgiout<<"Senha Mestre";
	outstreamxy(200,250);
	
	do
	{
		settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 1);
		setbkcolor(15);
		setcolor(0);
		senha[i] = getch();//aqui a letra digitada é lida uma a uma sem necessidade de apertar o enter
		//aqui funciona toda a lógica do backspace. Com isso podemos apagar o que foi digitado
		if(senha[i] == 13 || i == 14) //interromper a função, caso digite enter ou numero de letras seja igual a 14
		{
			if(senha[i] == 13)//muda o valor de enter para \0, pois nao queremos armazenar o valor do enter
				senha[i] = '\0';
			break;
		}
		if (senha[i] == 8)
		{
			setcolor (0); // cor da linha: 0 igual a preto
			setfillstyle (1, 15);//(forma de preenchimento, cor do preenchimento)  
 			
			if(i==1)
			{
				bar(151, 280, 170, 299); //preenche o local onde a letra foi escrita de branco
				i--;//subtraindo 1 de 'i', pois é necessario para que salve as letras corretamente
			}
			else
			{
				bar(150+((i-1)*15), 280, 170+((i-1)*15), 299); //preenche o local onde a letra foi escrita de branco
				i--;//subtraindo 1 de 'i', pois é necessario para que salve as letras corretamente
			}
	
		}
		else
		{
			bgiout <<senha[i];//função de saída na tela gráfica. Precisará ainda da "outstreamxy"
			if(i==1)//para a primeira caixinha
			{
				outstreamxy(i*170,276);//impriminto letras delocadas a cada passo. Para a primeira caixinha é diferente.
			}
			else//para todas as outras caixinhas
			{
				outstreamxy(170+((i-1)*15),276);//cálculo maluco para acertaras letras na caixinha
			}
			i++; //variável utilizada apenas para deslocar o texto
		}	
	}while(senha[i]!=13 && i<15);//digitar "ENTER" para sair...	
}

void sucesso(void)//função que mostra uma nova janela para informar o sucesso da operação
{
	initwindow(450,100, "SUCESSO!!");
	setcolor (0); // cor da linha: 0 igual a preto
	setfillstyle (1, 15);//(forma de preenchimento, cor do preenchimento)  
 	bar(0, 0, 450, 100); // fundo branco
  	rectangle(5,5,445,95);//cria borba na tela
	settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 3);
	setbkcolor(15);
	setcolor(0);
	bgiout<<"PARABENS!!!";
	outstreamxy(30,30);
	bgiout<<"CRIPTOGRAFIA FEITA COM SUCESSO.";
	outstreamxy(30,50);	
}

void tecladoD(char *senha, char *nome)
{
	settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 1);
	setbkcolor(15);
	setcolor(0);
	int i=0,k;
	for(k=1;k<3;k++)
	{
		rectangle(150,195+(k*50),350,220+(k*50));
	}
	
	bgiout<<"Senha Mestre";
	outstreamxy(200,223);
	bgiout<<"Nome da imagem";
	outstreamxy(190,273);
	
	do
	{
		settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 1);
		setbkcolor(15);
		setcolor(0);
		senha[i] = getch();//aqui a letra digitada é lida uma a uma sem necessidade de apertar o enter
		//aqui funciona toda a lógica do backspace. Com isso podemos apagar o que foi digitado
		if(senha[i] == 13 || i == 14) //interromper a função, caso digite enter ou numero de letras seja igual a 14
		{
			if(senha[i] == 13)//muda o valor de enter para \0, pois nao queremos armazenar o valor do enter
				senha[i] = '\0';
			break;
		}
		if (senha[i] == 8)
		{
			setcolor (0); // cor da linha: 0 igual a preto
			setfillstyle (1, 15);//(forma de preenchimento, cor do preenchimento)  
 			
			if(i==1)
			{
				bar(151, 250, 170, 269); //preenche o local onde a letra foi escrita de branco
				i--;//subtraindo 1 de 'i', pois é necessario para que salve as letras corretamente
			}
			else
			{
				bar(150+((i-1)*15),250, 170+((i-1)*15), 269); //preenche o local onde a letra foi escrita de branco
				i--;//subtraindo 1 de 'i', pois é necessario para que salve as letras corretamente
			}
	
		}
		else
		{
			bgiout <<senha[i];//função de saída na tela gráfica. Precisará ainda da "outstreamxy"
			if(i==1)//para a primeira caixinha
			{
				outstreamxy(i*170,246);//impriminto letras delocadas a cada passo. Para a primeira caixinha é diferente.
			}
			else//para todas as outras caixinhas
			{
				outstreamxy(170+((i-1)*15),246);//cálculo maluco para acertaras letras na caixinha
			}
			i++; //variável utilizada apenas para deslocar o texto
		}	
	}while(senha[i]!=13 && i<15);//digitar "ENTER" para sair...	
	
	i = 0; //zerando variavel
	do
	{
		settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 1);
		setbkcolor(15);
		setcolor(0);
		nome[i] = getch();//aqui a letra digitada é lida uma a uma sem necessidade de apertar o enter
		//aqui funciona toda a lógica do backspace. Com isso podemos apagar o que foi digitado
		if(nome[i] == 13 || i == 14) //interromper a função, caso digite enter ou numero de letras seja igual a 14
		{
			if(nome[i] == 13)//muda o valor de enter para \0, pois nao queremos armazenar o valor do enter
				nome[i] = '\0';
			break;
		}
		if (nome[i] == 8)
		{
			setcolor (0); // cor da linha: 0 igual a preto
			setfillstyle (1, 15);//(forma de preenchimento, cor do preenchimento)  
 			
			if(i==1)
			{
				bar(151, 300, 170, 319); //preenche o local onde a letra foi escrita de branco
				i--;//subtraindo 1 de 'i', pois é necessario para que salve as letras corretamente
			}
			else
			{
				bar(150+((i-1)*15), 300, 170+((i-1)*15), 319); //preenche o local onde a letra foi escrita de branco
				i--;//subtraindo 1 de 'i', pois é necessario para que salve as letras corretamente
			}
	
		}
		else
		{
			bgiout <<nome[i];//função de saída na tela gráfica. Precisará ainda da "outstreamxy"
			if(i==1)//para a primeira caixinha
			{
				outstreamxy(i*170,296);//impriminto letras delocadas a cada passo. Para a primeira caixinha é diferente.
			}
			else//para todas as outras caixinhas
			{
				outstreamxy(170+((i-1)*15),296);//cálculo maluco para acertaras letras na caixinha
			}
			i++; //variável utilizada apenas para deslocar o texto
		}	
	}while(nome[i]!=13 && i<15);//digitar "ENTER" para sair...	
	strcat(nome, ".bmp");//adicionando .bmp no nome da imagem
}

int criptografar(char *senha, char comentarioA[MAX][20], char loginA[MAX][20], char senhaA[MAX][30], int imagem)
{
	int tamanho_senha = 0, maior_letra = 0, menor_letra = 255, soma = 0, contador_char = 0;				//<<contar caracteres a criptografar; 
	int *posicao_senha, i, j, nova_posicao, ultima_posicao, valor_contador[5], posicao_contador[5];		//guardar junto da senha pra saber até onde descriptografar
	int posicao_comentarioA[MAX][20], tam_comentarioA[MAX], pos_tam_comentarioA[MAX];
	int posicao_loginA[MAX][20], tam_loginA[MAX], pos_tam_loginA[MAX];
	int posicao_senhaA[MAX][20], tam_senhaA[MAX], pos_tam_senhaA[MAX];
	int final_img, copiar, posicao_tamanho_senha, tamanho_senha_crip;
	FILE *img_original, *img_copia;
	
	//achar tamanho da senha
	while (senha[tamanho_senha] != '\0')
	{
		tamanho_senha++;
	}
	posicao_senha = (int*) malloc(tamanho_senha*sizeof(int));
	
	//achar maior e menor caracteres da senha
	for (i=0; i<tamanho_senha; i++)
	{
		if (maior_letra < senha[i])
		{
			maior_letra = senha[i];
		}
		if (menor_letra > senha[i])
		{
			menor_letra = senha[i];
		}
		soma += senha[i];
	}
	
	//mudar valor dos caracteres da senha e posições na imagem
	nova_posicao = tamanho_senha*(maior_letra-menor_letra) + soma;
	posicao_tamanho_senha = nova_posicao + 18;
	for (i=0; i<tamanho_senha; i++)
	{
		if (i == 0)
		{
			posicao_senha[i] = nova_posicao;
		}
		else
		{
			posicao_senha[i] = posicao_senha[i-1] + nova_posicao;
		}
		
		senha[i] = senha[i] + (i+3) - menor_letra;
	}
	
	//achar tamanho de cada campo preenchido
	for (i=0; i<MAX; i++)
	{
		tam_comentarioA[i] = 0;
		while (comentarioA[i][tam_comentarioA[i]] != '\0')
		{
			tam_comentarioA[i]++;
			contador_char++;
		}
		tam_loginA[i] = 0;
		while (loginA[i][tam_loginA[i]] != '\0')
		{
			tam_loginA[i]++;
			contador_char++;
		}
		tam_senhaA[i] = 0;
		while (senhaA[i][tam_senhaA[i]] != '\0')
		{
			tam_senhaA[i]++;
			contador_char++;
		}		
	}
	
	//quantidade de caracteres preenchidos
	ultima_posicao = posicao_senha[tamanho_senha-1];
	for (i=0; i<5; i++)
	{
		if (contador_char >= 255)
		{
			valor_contador[i] = 255 - menor_letra + tamanho_senha;
			contador_char -= (255 - menor_letra + tamanho_senha);
		}
		else if (contador_char > 0 && contador_char < 255)
		{
			valor_contador[i] = contador_char;
			contador_char = 0;
		}
		else
		{
			valor_contador[i] = 0;
		}
		posicao_contador[i] = ultima_posicao + nova_posicao;
		ultima_posicao = posicao_contador[i];
	}
	
	//local dos tamanhos de cada campo
	for (i=0; i<MAX; i++)
	{
		pos_tam_comentarioA[i] = tamanho_senha*(maior_letra-menor_letra) + soma + 1 + i;
		pos_tam_loginA[i] = tamanho_senha*(maior_letra-menor_letra) + soma + 21 + i;
		pos_tam_senhaA[i] = tamanho_senha*(maior_letra-menor_letra) + soma + 41 + i;
	}	
	
	//mudar valor e posição dos caracteres de cada campo
	for (i=0; i<MAX; i++)
	{
		if (tam_comentarioA[i] > 0)
		{
			for (j=0; j<tam_comentarioA[i]; j++)
			{
				posicao_comentarioA[i][j] = ultima_posicao + nova_posicao;
				ultima_posicao = posicao_comentarioA[i][j];
				comentarioA[i][j] = comentarioA[i][j] + (menor_letra + maior_letra)/10;
			}
		}
		if (tam_loginA[i] > 0)
		{
			for (j=0; j<tam_loginA[i]; j++)
			{
				posicao_loginA[i][j] = ultima_posicao + nova_posicao;
				ultima_posicao = posicao_loginA[i][j];
				loginA[i][j] = loginA[i][j] + (menor_letra + maior_letra)/10;
			}
		}
		if (tam_senhaA[i] > 0)
		{
			for (j=0; j<tam_senhaA[i]; j++)
			{
				posicao_senhaA[i][j] = ultima_posicao + nova_posicao;
				ultima_posicao = posicao_senhaA[i][j];
				senhaA[i][j] = senhaA[i][j] + (menor_letra + maior_letra)/10;
			}
		}
	}
	
	//**************IMAGEM****************
	
	switch (imagem)
	{
		case 1:
			img_original = fopen("img1.bmp", "r");
			break;
		case 2:
			img_original = fopen("img2.bmp", "r");
			break;
		case 3:
			img_original = fopen("img3.bmp", "r");
			break;
		case 4:
			img_original = fopen("img4.bmp", "r");
			break;
	}
	
	//tamanho da img
	fseek(img_original, 2, SEEK_SET);
 	fread(&final_img, 4, 1, img_original);
	
	//criar cópia da imagem pra fazer alterações
	img_copia = fopen("img crip.bmp", "w");
	for (i=0; i<final_img; i++)
	{
		fseek(img_original, i, SEEK_SET);
		fread(&copiar, 1, 1, img_original);
		fseek(img_copia, i, SEEK_SET);
		fwrite(&copiar, 1, 1, img_copia);
	}
	
	//guardar senha
	tamanho_senha_crip = tamanho_senha + (maior_letra-menor_letra);
	fseek(img_copia, posicao_tamanho_senha, SEEK_SET);
	fwrite(&tamanho_senha_crip, 1, 1, img_copia);
	for (i=0; i<tamanho_senha; i++)
	{
		fseek(img_copia, posicao_senha[i], SEEK_SET);
		fwrite(&senha[i], 1, 1, img_copia);
	}
	
	//guardar qtd caracteres
	for (i=0; i<5; i++)
	{
		fseek(img_copia, posicao_contador[i], SEEK_SET);
		fwrite(&valor_contador[i], 1, 1, img_copia);
	}
	
	//guardar tamanho campo
	for (i=0; i<MAX; i++)
	{
		fseek(img_copia, pos_tam_comentarioA[i], SEEK_SET);
		fwrite(&tam_comentarioA[i], 1, 1, img_copia);
		fseek(img_copia, pos_tam_loginA[i], SEEK_SET);
		fwrite(&tam_loginA[i], 1, 1, img_copia);
		fseek(img_copia, pos_tam_senhaA[i], SEEK_SET);
		fwrite(&tam_senhaA[i], 1, 1, img_copia);
	}
	
	//guardar caracteres
	for (i=0; i<MAX; i++)
	{
		if (tam_comentarioA[i] > 0)
		{
			for (j=0; j<tam_comentarioA[i]; j++)
			{	
				fseek(img_copia, posicao_comentarioA[i][j], SEEK_SET);
				fwrite(&comentarioA[i][j], 1, 1, img_copia);
			}			
		}
		if (tam_loginA[i] > 0)
		{
			for (j=0; j<tam_loginA[i]; j++)
			{	
				fseek(img_copia, posicao_loginA[i][j], SEEK_SET);
				fwrite(&loginA[i][j], 1, 1, img_copia);
			}			
		}
		if (tam_senhaA[i] > 0)
		{
			for (j=0; j<tam_senhaA[i]; j++)
			{	
				fseek(img_copia, posicao_senhaA[i][j], SEEK_SET);
				fwrite(&senhaA[i][j], 1, 1, img_copia);
			}			
		}		
	}
	
	fclose(img_original);
	fclose(img_copia);
	return 0;
}



int descriptografar(char *senha, char comentarioA[MAX][20], char loginA[MAX][20], char senhaA[MAX][30], char *nome, int contador)
{
	int tamanho_senha = 0, maior_letra = 0, menor_letra = 255, soma = 0, contador_char = 0; 			//<<contar caracteres a criptografar; 
	int *posicao_senha, i, j, posicao_contador[5], valor_contador[5], nova_posicao, ultima_posicao; 	//guardar junto da senha pra saber até onde descriptografar
	int posicao_comentarioA[MAX][20], tam_comentarioA[MAX], pos_tam_comentarioA[MAX];
	int posicao_loginA[MAX][20], tam_loginA[MAX], pos_tam_loginA[MAX];
	int posicao_senhaA[MAX][20], tam_senhaA[MAX], pos_tam_senhaA[MAX];
	int senha_confere = 0, posicao_tamanho_senha, tamanho_senha_crip = 0, contador_senha = 0;
	char *senha_crip, *senha_digitada;
	FILE *img_copia;
	
	//achar tamanho da senha
	while (senha[tamanho_senha] != '\0')
	{
		tamanho_senha++;
	}
	posicao_senha = (int*) malloc(tamanho_senha*sizeof(int));
	senha_crip = (char*) malloc(tamanho_senha*sizeof(char));
	senha_digitada = (char*) malloc(tamanho_senha*sizeof(char));
	
	//achar maior e menor caracteres da senha
	for (i=0; i<tamanho_senha; i++)
	{
		senha_digitada[i] = senha[i];
		if (maior_letra < senha[i])
		{
			maior_letra = senha[i];
		}
		if (menor_letra > senha[i])
		{
			menor_letra = senha[i];
		}
		soma += senha[i];
	}
	
	//mudar posições dos caracteres da senha na imagem
	nova_posicao = tamanho_senha*(maior_letra-menor_letra) + soma;
	posicao_tamanho_senha = nova_posicao + 18;
	for (i=0; i<tamanho_senha; i++)
	{
		if (i == 0)
		{
			posicao_senha[i] = nova_posicao;
		}
		else
		{
			posicao_senha[i] = posicao_senha[i-1] + nova_posicao;
		}
		
		senha[i] = senha[i] + (i+3) - menor_letra;
	}
	
	//achar tamanho de cada campo preenchido
/*	for (i=0; i<10n_campo; i++)
	{
		tam_campo[i] = 0;
		while (campo[i][tam_campo[i]] != '\0')
		{
			tam_campo[i]++;
			contador_char++;
		}
	}
*/	
	//quantidade de caracteres preenchidos
	ultima_posicao = posicao_senha[tamanho_senha-1];
	for (i=0; i<5; i++)
	{
/*		if (contador_char >= 255)
		{
			valor_contador[i] = 255 - menor_letra + tamanho_senha;
			contador_char -= (255 - menor_letra + tamanho_senha);
		}
		else if (contador_char > 0 && contador_char < 255)
		{
			valor_contador[i] = contador_char;
			contador_char = 0;
		}
		else
		{
			valor_contador[i] = 0;
		}
*/		posicao_contador[i] = ultima_posicao + nova_posicao;
		ultima_posicao = posicao_contador[i];
	}
	
	//local dos tamanhos de cada campo
	for (i=0; i<contador; i++)
	{
		pos_tam_comentarioA[i] = tamanho_senha*(maior_letra-menor_letra) + soma + 1 + i;
		pos_tam_loginA[i] = tamanho_senha*(maior_letra-menor_letra) + soma + 21 + i;
		pos_tam_senhaA[i] = tamanho_senha*(maior_letra-menor_letra) + soma + 41 + i;
	}		
	
	//**************IMAGEM****************
	
	
	img_copia = fopen(nome, "r+");
	
	//extrair senha
	fseek(img_copia, posicao_tamanho_senha, SEEK_SET);
	fread(&tamanho_senha_crip, 1, 1, img_copia);
	tamanho_senha_crip -= (maior_letra-menor_letra);
	for (i=0; i<tamanho_senha; i++)
	{
		fseek(img_copia, posicao_senha[i], SEEK_SET);
		fread(&senha_crip[i], 1, 1, img_copia);
		senha_crip[i] = senha_crip[i] + menor_letra - (i+3);
	}
	
	//conferir senha	
	if (tamanho_senha_crip == tamanho_senha)
	{												
		for (i=0; i<tamanho_senha; i++)
		{
			if (senha_crip[i] == senha_digitada[i])
			{
				contador_senha++;
			}
		}
		if (contador_senha == tamanho_senha_crip)
		{
			senha_confere = 1;
		}
	}
	
	if (senha_confere == 0)
	{
		printf("Senha nao encontrada.\n");
	}
	else
	{
		//extrair tamanho de cada campo
		for (i=0; i<contador; i++)
		{
			tam_comentarioA[i] = 0;
			tam_loginA[i] = 0;
			tam_senhaA[i] = 0;
			fseek(img_copia, pos_tam_comentarioA[i], SEEK_SET);
			fread(&tam_comentarioA[i], 1, 1, img_copia);
//printf("tam_comentarioA[%d]: %d\n", i, tam_comentarioA[i]);
			fseek(img_copia, pos_tam_loginA[i], SEEK_SET);
			fread(&tam_loginA[i], 1, 1, img_copia);
//printf("tam_loginA[%d]: %d\n", i, tam_loginA[i]);
			fseek(img_copia, pos_tam_senhaA[i], SEEK_SET);
			fread(&tam_senhaA[i], 1, 1, img_copia);
//printf("tam_senhaA[%d]: %d\n\n", i, tam_senhaA[i]);
		}
		//extrair qtd caracteres
/*		for (i=0; i<5; i++)
		{
			valor_contador[i] = 0;
			fseek(img_copia, posicao_contador[i], SEEK_SET);
			fread(&valor_contador[i], 1, 1, img_copia);
			contador_char += valor_contador[i];
		}
		int posicao_campo[contador_char];
		char campo[contador_char];				*/
		
		//mudar posição dos caracteres de cada campo
		for (i=0; i<contador; i++)
		{
			if (tam_comentarioA[i] > 0)
			{
				for (j=0; j<tam_comentarioA[i]; j++)
				{
					posicao_comentarioA[i][j] = ultima_posicao + nova_posicao;
					ultima_posicao = posicao_comentarioA[i][j];
					comentarioA[i][j] = comentarioA[i][j] - (menor_letra + maior_letra)/10;
				}
			}
			if (tam_loginA[i] > 0)
			{
				for (j=0; j<tam_loginA[i]; j++)
				{
//printf("tam_loginA[%d]: %d\n", j, tam_loginA[i]);
					posicao_loginA[i][j] = ultima_posicao + nova_posicao;
					ultima_posicao = posicao_loginA[i][j];
					loginA[i][j] = loginA[i][j] - (menor_letra + maior_letra)/10;
				}
			}
			if (tam_senhaA[i] > 0)
			{
				for (j=0; j<tam_senhaA[i]; j++)
				{
					posicao_senhaA[i][j] = ultima_posicao + nova_posicao;
					ultima_posicao = posicao_senhaA[i][j];
					senhaA[i][j] = senhaA[i][j] - (menor_letra + maior_letra)/10;
				}
			}
		}
	
		//extrair caracteres
		for (i=0; i<contador; i++)
		{
			if (tam_comentarioA[i] > 0)
			{
				for (j=0; j<tam_comentarioA[i]; j++)
				{
				fseek(img_copia, posicao_comentarioA[i][j], SEEK_SET);
				fread(&comentarioA[i][j], 1, 1, img_copia);
				comentarioA[i][j] = comentarioA[i][j] - (menor_letra + maior_letra)/10;
				}
			}
			if (tam_loginA[i] > 0)
			{
				for (j=0; j<tam_loginA[i]; j++)
				{
				fseek(img_copia, posicao_loginA[i][j], SEEK_SET);
				fread(&loginA[i][j], 1, 1, img_copia);
				loginA[i][j] = loginA[i][j] - (menor_letra + maior_letra)/10;
				}
			}
			if (tam_senhaA[i] > 0)
			{
				for (j=0; j<tam_senhaA[i]; j++)
				{
				fseek(img_copia, posicao_senhaA[i][j], SEEK_SET);
				fread(&senhaA[i][j], 1, 1, img_copia);
				senhaA[i][j] = senhaA[i][j] - (menor_letra + maior_letra)/10;
				}
			}
		}				
	}	
	
	//TESTE - leitura do que foi extraído da imagem
	for (i=0; i<contador; i++)
	{
		printf("i=%d:\n", i);
		if (tam_comentarioA[i] > 0)
		{
			puts(comentarioA[i]);
		}
		if (tam_loginA[i] > 0)
		{
			puts(loginA[i]);
		}
		if (tam_senhaA[i] > 0)
		{
			puts(senhaA[i]);
		}
	}	
	
	fclose(img_copia);
	return senha_confere;
}
